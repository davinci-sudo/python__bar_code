import cv2
import pyzbar.pyzbar as pyzbar
#import numpy
from PIL import Image, ImageDraw, ImageFont
'''
CODE128码是广泛应用在企业内部管理、生产流程、物流控制系统方面的条码码制，由于其优良的特性在管理信息系统的设计中被广泛使用，CODE128码是应用最广泛的条码码制之一。
CODE128码是1981年引入的一种高密度条码，CODE128 码可表示从 ASCII 0 到ASCII 127 共128个字符，故称128码。其中包含了数字、字母和符号字符。

#pycharm 安装 cv2
    window7 64位系统
    python3.6
    pycharm ctrl+alt+s
    找到 opencv-python,直接安装,完全没问题。
#安装pyzbar
1. Windows
    在 Windows 的环境下只需要使用 pip 安装即可：
    pip install pyzbar
2. Ubuntu
    sudo apt-get install libzbar-dev
    pip install zbar
3、centos7
    yum install python-devel
    yum install zbar-devel
    yum install zbar
    
PIL是Python平台事实上的图像处理标准库，支持多种格式，并提供强大的图形与图像处理功能。
  目前PIL的官方最新版本为1.1.7，支持的版本为python 2.5, 2.6, 2.7，并不支持python3，
  因此我们用pillow代替，进入DOS命令行窗口，敲入以下代码
  pip install pillow
'''
def decodeDisplay(img_path):
    img_data = cv2.imread(img_path)
    # 转为灰度图像
    gray = cv2.cvtColor(img_data, cv2.COLOR_BGR2GRAY)
    barcodes = pyzbar.decode(gray)

    for barcode in barcodes:
        # 提取条形码的边界框的位置
        (x, y, w, h) = barcode.rect
        # 画出图像中条形码的边界框
        cv2.rectangle(img_data, (x, y), (x + w, y + h), (0, 255, 0), 2)
        # 条形码数据为字节对象，所以如果我们想在输出图像上画出来，就需要先将它转换成字符串
        barcodeData = barcode.data.decode("utf-8")
        barcodeType = barcode.type
        # 不能显示中文
        # 绘出图像上条形码的数据和条形码类型
        # text = "{} ({})".format(barcodeData, barcodeType)
        # cv2.putText(imagex1, text, (x, y - 10), cv2.FONT_HERSHEY_SIMPLEX,5, (0, 0, 125), 2)
        # 更换为：
        img_PIL = Image.fromarray(cv2.cvtColor(img_data, cv2.COLOR_BGR2RGB))
        # 参数（字体，默认大小）
        font = ImageFont.truetype('msyh.ttc', 35)
        # 字体颜色（rgb)
        fillColor = (0, 255, 255)
        # 文字输出位置
        position = (x, y - 10)
        # 输出内容
        str = barcodeData
        # 需要先把输出的中文字符转换成Unicode编码形式(  str.decode("utf-8)   )
        draw = ImageDraw.Draw(img_PIL)
        draw.text(position, str, font=font, fill=fillColor)
        # 使用PIL中的save方法保存图片到本地
        img_PIL.save('02.jpg', 'jpeg')

        # 向终端打印条形码数据和条形码类型
        print(f"扫描结果==》 类别：{barcodeType} 内容：{barcodeData}")
if __name__ == '__main__':
    decodeDisplay("977c384d4f6b2044fd4f1c0cf76b8c.jpg")
